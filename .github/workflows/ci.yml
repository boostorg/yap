name: GitHub Actions CI

on:
  pull_request:
  push:
    branches:
      - master
      - develop
      - githubactions*
      - feature/**
      - fix/**
      - pr/**

jobs:
  posix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "GCC_VERSION=6 ASAN=off Job 2"
            buildtype: "boost"
            packages: "g++-6 valgrind"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            container: "ubuntu:14.04"
            cxx: "gcc-6"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            gcc_version: "6"
            asan: "off"
          - name: "GCC_VERSION=7 ASAN=off Job 3"
            buildtype: "boost"
            packages: "g++-7 valgrind"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "gcc-7"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            gcc_version: "7"
            asan: "off"
          - name: "GCC_VERSION=8 ASAN=off Job 4"
            buildtype: "boost"
            packages: "g++-8 valgrind"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "gcc-8"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            gcc_version: "8"
            asan: "off"

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - name: Check if running in container
        if: matrix.container != ''
        run: echo "GHA_CONTAINER=${{ matrix.container }}" >> $GITHUB_ENV
      - name: If running in container, upgrade packages
        if: matrix.container != ''
        run: |
            sudo apt-get -o Acquire::Retries=3 update && DEBIAN_FRONTEND=noninteractive apt-get -y install tzdata && apt-get -o Acquire::Retries=3 install -y sudo software-properties-common wget curl apt-transport-https make apt-file sudo unzip libssl-dev build-essential autotools-dev autoconf automake g++ libc++-helpers python python-pip ruby cpio gcc-multilib g++-multilib pkgconf python3 python3-pip ccache libpython-dev
            sudo apt-add-repository ppa:git-core/ppa
            sudo apt-get -o Acquire::Retries=3 update && apt-get -o Acquire::Retries=3 -y install git
            sudo python -m pip install --upgrade pip==20.3.4
            sudo /usr/local/bin/pip install cmake

      - uses: actions/checkout@v2

      - name: linux
        shell: bash
        env:
          CXX: ${{ matrix.cxx }}
          SOURCES: ${{ matrix.sources }}
          LLVM_OS: ${{ matrix.llvm_os }}
          LLVM_VER: ${{ matrix.llvm_ver }}
          PACKAGES: ${{ matrix.packages }}
          PACKAGES_TO_REMOVE: ${{ matrix.packages_to_remove }}
          JOB_BUILDTYPE: ${{ matrix.buildtype }}
          ASAN: ${{ matrix.asan }}
          MAC_OSX: ${{ matrix.mac_osx }}
          GCC_VERSION: ${{ matrix.gcc_version }}
          TRAVIS_BRANCH: ${{ github.base_ref }}
          TRAVIS_OS_NAME: "linux"
        run: |
          echo '==================================> SETUP'
          echo '==================================> PACKAGES'
          set -e
          if [ -n "$PACKAGES_TO_REMOVE" ]; then sudo apt-get purge -y $PACKAGES_TO_REMOVE; fi
          echo ">>>>> APT: REPO.."
          for i in {1..3}; do sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test" && break || sleep 2; done
          
          if test -n "${LLVM_OS}" ; then
              wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
              if test -n "${LLVM_VER}" ; then
                  sudo -E apt-add-repository "deb http://apt.llvm.org/${LLVM_OS}/ llvm-toolchain-${LLVM_OS}-${LLVM_VER} main"
              else
                  # Snapshot (i.e. trunk) build of clang
                  sudo -E apt-add-repository "deb http://apt.llvm.org/${LLVM_OS}/ llvm-toolchain-${LLVM_OS} main"
              fi
          fi
          echo ">>>>> APT: UPDATE.."
          sudo -E apt-get -o Acquire::Retries=3 update
          if test -n "${SOURCES}" ; then
              echo ">>>>> APT: INSTALL SOURCES.."
              for SOURCE in $SOURCES; do
                  sudo -E apt-add-repository ppa:$SOURCE
              done
          fi
          echo ">>>>> APT: INSTALL ${PACKAGES}.."
          sudo -E DEBIAN_FRONTEND=noninteractive apt-get -o Acquire::Retries=3 -y --no-install-suggests --no-install-recommends install ${PACKAGES}

          echo '==================================> INSTALL AND COMPILE'
          set -e
          export TRAVIS_BUILD_DIR=$(pwd)
          export TRAVIS_BRANCH=${TRAVIS_BRANCH:-$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')}
          export VCS_COMMIT_ID=$GITHUB_SHA
          export GIT_COMMIT=$GITHUB_SHA
          export REPO_NAME=$(basename $GITHUB_REPOSITORY)
          export USER=$(whoami)
          export CC=${CC:-gcc}
          export PATH=~/.local/bin:/usr/local/bin:$PATH

          if [ "$JOB_BUILDTYPE" == "boost" ]; then

          echo '==================================> INSTALL'

          export CHECKOUT_PATH=`pwd`;
          if [ -n "$GCC_VERSION" ]; then export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}"; fi
          if [ -n "$CLANG_VERSION" ]; then export CXXFLAGS="${CXXFLAGS} -stdlib=libstdc++" CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}"; fi
          export DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
          mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
          mkdir usr
          export PATH=${DEPS_DIR}/usr/bin:${PATH}
          if [[ "$MAC_OSX" == "true" ]]; then
            export CMAKE_URL="http://www.cmake.org/files/v3.7/cmake-3.7.0-Darwin-x86_64.tar.gz"
            wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=3 -xz -C usr
          else
            export CMAKE_URL="http://www.cmake.org/files/v3.7/cmake-3.7.0-Linux-x86_64.tar.gz"
            wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C usr
          fi

          echo $PATH
          wget --no-check-certificate --quiet https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.bz2
          tar xjf boost_1_68_0.tar.bz2

          $CXX --version || true
          which $CXX || true
          $CC --version || true
          which $CC || true
          which cmake || true
          cmake --version || true
          export CXXFLAGS="${CXXFLAGS} -Wall"

          echo '==================================> SCRIPT'

          cd $CHECKOUT_PATH
          export ASANVARIANT="false"
          if [[ "$ASAN" == "on" ]]; then export ASANVARIANT="true"; fi
          for build_type in Debug Release; do
            for asan_type in $ASANVARIANT; do
              build_dir="build-$build_type-asan-$asan_type"
              mkdir $build_dir
              cd $build_dir
              if [[ "$asan_type" == "true" ]]; then 
                CXXFLAGS="$CXXFLAGS" cmake -DUSE_ASAN=true -DBOOST_ROOT=${DEPS_DIR}/boost_1_68_0 -DCMAKE_BUILD_TYPE=$build_type ..
              else
                cmake -DBOOST_ROOT=${DEPS_DIR}/boost_1_68_0 -DCMAKE_BUILD_TYPE=$build_type ..
              fi
              VERBOSE=1 make -j4 && CTEST_OUTPUT_ON_FAILURE=1 CTEST_PARALLEL_LEVEL=4 ASAN_OPTIONS=alloc_dealloc_mismatch=0 make check
              if [ $? -ne 0 ]
              then
                exit 1
              fi
              cd ..
              rm -rf $build_dir
            done
          done

          fi
  osx:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "ASAN=on MAC_OSX=true Job 0"
            buildtype: "boost"
            packages: ""
            os: "macos-10.15"
            cxx: "clang++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            xcode_version: 11.7
            asan: "on"
            mac_osx: "true"
          - name: "ASAN=on MAC_OSX=true Job 1"
            buildtype: "boost"
            packages: ""
            os: "macos-10.15"
            cxx: "clang++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            xcode_version: 11.7
            asan: "on"
            mac_osx: "true"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Set DEVELOPER_DIR
        if: matrix.xcode_version != ''
        run: echo "DEVELOPER_DIR=/Applications/Xcode_${{ matrix.xcode_version }}.app/Contents/Developer" >> $GITHUB_ENV
      - name: Test DEVELOPER_DIR
        run: echo $DEVELOPER_DIR

      - name: "osx"
        shell: bash
        env:
          CXX: ${{ matrix.cxx }}
          SOURCES: ${{ matrix.sources }}
          LLVM_OS: ${{ matrix.llvm_os }}
          LLVM_VER: ${{ matrix.llvm_ver }}
          PACKAGES: ${{ matrix.packages }}
          JOB_BUILDTYPE: ${{ matrix.buildtype }}
          ASAN: ${{ matrix.asan }}
          MAC_OSX: ${{ matrix.mac_osx }}
          GCC_VERSION: ${{ matrix.gcc_version }}
          TRAVIS_BRANCH: ${{ github.base_ref }}
          TRAVIS_OS_NAME: "osx"
        run: |
          echo '==================================> SETUP'
          set -e
          sudo mv /Library/Developer/CommandLineTools /Library/Developer/CommandLineTools.bck
          echo '==================================> PACKAGES'
          echo '==================================> INSTALL AND COMPILE'
          set -e
          export TRAVIS_BUILD_DIR=$(pwd)
          export TRAVIS_BRANCH=${TRAVIS_BRANCH:-$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')}
          export VCS_COMMIT_ID=$GITHUB_SHA
          export GIT_COMMIT=$GITHUB_SHA
          export REPO_NAME=$(basename $GITHUB_REPOSITORY)
          export USER=$(whoami)
          export CC=${CC:-gcc}
          export PATH=~/.local/bin:/usr/local/bin:$PATH

          if [ "$JOB_BUILDTYPE" == "boost" ]; then

          echo '==================================> INSTALL'

          export CHECKOUT_PATH=`pwd`;
          if [ -n "$GCC_VERSION" ]; then export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}"; fi
          if [ -n "$CLANG_VERSION" ]; then export CXXFLAGS="${CXXFLAGS} -stdlib=libstdc++" CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}"; fi
          export DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
          mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
          mkdir usr
          export PATH=${DEPS_DIR}/usr/bin:${PATH}
          if [[ "$MAC_OSX" == "true" ]]; then
            export CMAKE_URL="http://www.cmake.org/files/v3.7/cmake-3.7.0-Darwin-x86_64.tar.gz"
            wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=3 -xz -C usr
          else
            export CMAKE_URL="http://www.cmake.org/files/v3.7/cmake-3.7.0-Linux-x86_64.tar.gz"
            wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C usr
          fi

          echo $PATH
          wget --no-check-certificate --quiet https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.bz2
          tar xjf boost_1_68_0.tar.bz2

          $CXX --version || true
          which $CXX || true
          $CC --version || true
          which $CC || true
          which cmake || true
          cmake --version || true
          export CXXFLAGS="${CXXFLAGS} -Wall"

          echo '==================================> SCRIPT'

          cd $CHECKOUT_PATH
          export ASANVARIANT="false"
          if [[ "$ASAN" == "on" ]]; then export ASANVARIANT="true"; fi
          for build_type in Debug Release; do
            for asan_type in $ASANVARIANT; do
              build_dir="build-$build_type-asan-$asan_type"
              mkdir $build_dir
              cd $build_dir
              if [[ "$asan_type" == "true" ]]; then 
                CXXFLAGS="$CXXFLAGS" cmake -DUSE_ASAN=true -DBOOST_ROOT=${DEPS_DIR}/boost_1_68_0 -DCMAKE_BUILD_TYPE=$build_type ..
              else
                cmake -DBOOST_ROOT=${DEPS_DIR}/boost_1_68_0 -DCMAKE_BUILD_TYPE=$build_type ..
              fi
              VERBOSE=1 make -j4 && CTEST_OUTPUT_ON_FAILURE=1 CTEST_PARALLEL_LEVEL=4 ASAN_OPTIONS=alloc_dealloc_mismatch=0 make check
              if [ $? -ne 0 ]
              then
                exit 1
              fi
              cd ..
              rm -rf $build_dir
            done
          done

          fi
